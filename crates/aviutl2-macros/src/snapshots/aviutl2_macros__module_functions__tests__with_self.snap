---
source: crates/aviutl2-macros/src/module_functions.rs
expression: format_tokens(output)
---
impl MyModule {
    fn my_function(&self, fuga: f64) -> f64 {
        fuga * 2.0
    }
}
::aviutl2::__internal_module! {
    impl ::aviutl2::module::ScriptModuleFunctions for MyModule {
        fn functions() -> Vec<::aviutl2::module::ModuleFunction> {
            let mut functions = Vec::new();
            functions.push(::aviutl2::module::ModuleFunction {
                name: "my_function".to_string(),
                func: <MyModule>::__aviutl2_internal_module_function_my_function,
            });
            functions
        }
    }
    impl MyModule {
        extern "C" fn __aviutl2_internal_module_function_my_function(
            smp: *mut ::aviutl2::sys::module2::SCRIPT_MODULE_PARAM,
        ) {
            let params = ::aviutl2::module::ScriptModuleCallHandle::from_ptr(smp);
            let __internal_self = < MyModule as :: aviutl2 :: module :: __bridge :: ScriptModuleSingleton > :: __get_singleton_state () ;
            let __internal_self = __internal_self
                .read()
                .expect("Plugin handle is not initialized");
            let __internal_self = &__internal_self
                .as_ref()
                .expect("Plugin instance is not initialized")
                .instance;
            let fuga: f64 =
                match <f64 as ::aviutl2::module::__bridge::FromScriptModuleParam>::from_param(
                    &params, 0usize,
                ) {
                    ::std::option::Option::Some(value) => value,
                    ::std::option::Option::None => {
                        params.set_error(&format!(
                            "Failed to convert parameter #{} to {}",
                            0usize,
                            stringify!(f64)
                        ));
                        return;
                    }
                };
            let result = <MyModule>::my_function(__internal_self, fuga);
            ::aviutl2::module::ToScriptModuleReturnValue::push_value(&result, &params);
        }
    }
}
